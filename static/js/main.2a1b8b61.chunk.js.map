{"version":3,"sources":["data.csv","components/table.js","components/chart.js","components/header.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["module","exports","table","props","state","selectedColumn","selectedColumnUniqueSet","clickableColumns","tableHeight","resetFilter","bind","column","columnIndex","this","data","indexOf","uniqueSetArray","map","rowData","index","length","arrayIndex","getArrayObjectIndex","selectedColumnObject","Object","columns","push","setState","value","NaN","Number","graphArray","findIndex","x","lineChartHeight","document","getElementById","offsetHeight","window","innerHeight","Fragment","Row","className","Col","xs","span","offset","Button","variant","size","block","disabled","onClick","style","height","Table","updateSelectedColumn","rowIndex","rowSpan","OverlayTrigger","key","placement","overlay","Tooltip","id","Component","options","legend","display","scales","yAxes","ticks","beginAtZero","chart","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","nextProps","nextState","dateIndex","netWinIndex","getIndex","graphObject","date","netwin","dateArray","netWinArray","dataValue","prevState","assign","ref","chartReference","header","Navbar","expand","fixed","Brand","href","src","logo","alt","App","rows","fetch","require","then","response","text","json","readString","marginTop","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a1b8b61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.79dc85dd.csv\";","import React, { Component } from 'react';\r\nimport { Table, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport { Row, Col, Button } from 'react-bootstrap';\r\n\r\nexport default class table extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedColumn: '',\r\n            selectedColumnUniqueSet: [],\r\n            clickableColumns: ['Area', 'Zone', 'Bank', 'Stand', 'Asset', 'Date'],\r\n            tableHeight: ''\r\n        }\r\n        this.resetFilter = this.resetFilter.bind(this);\r\n    }\r\n\r\n    updateSelectedColumn(column) {\r\n        var columnIndex = this.props.data[0].indexOf(column)\r\n        var uniqueSetArray = [];\r\n        this.props.data.map((rowData, index) => {\r\n            if (index != 0 && rowData[0].length != 0) {\r\n                var arrayIndex = this.getArrayObjectIndex(uniqueSetArray, rowData[columnIndex]);\r\n                if (arrayIndex == -1) {\r\n                    var selectedColumnObject = new Object();\r\n                    selectedColumnObject.selectedColumn = rowData[columnIndex];\r\n                    selectedColumnObject.columns = [];\r\n                    selectedColumnObject.columns.push(rowData)\r\n                    uniqueSetArray.push(selectedColumnObject)\r\n                } else {\r\n                    uniqueSetArray[arrayIndex].columns = [...uniqueSetArray[arrayIndex].columns, rowData]\r\n                }\r\n            }\r\n        });\r\n        this.setState({\r\n            selectedColumn: column,\r\n            selectedColumnUniqueSet: uniqueSetArray\r\n        })\r\n\r\n    }\r\n\r\n    convertStringToNumber(value) {\r\n        var returnValue;\r\n        Number(value) != NaN ? returnValue = Number(value) : returnValue = value\r\n        return returnValue;\r\n    }\r\n\r\n    getArrayObjectIndex(graphArray, selectedColumn) {\r\n        return graphArray.findIndex(x => x.selectedColumn === selectedColumn);\r\n    }\r\n\r\n    resetFilter() {\r\n        this.setState({\r\n            selectedColumn: '',\r\n            selectedColumnUniqueSet: []\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        var lineChartHeight = document.getElementById('lineChartDiv').offsetHeight;\r\n        this.setState({\r\n            tableHeight: (window.innerHeight - lineChartHeight - 55 - 45 - 16) //55-margin-top; 45-height of table headring; 16 -margin top and bottom for each divs , 4 each\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Row className=\"m-1 tableHeading\">\r\n                    <Col xs={{ span: 8, offset: 2 }}>\r\n                        <h4 className=\"text-center mb-0\">Data Table</h4>\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                        <Button variant=\"primary\" size=\"sm\" block disabled={this.state.selectedColumn.length == 0 ? 'disabled' : ''} onClick={this.resetFilter}>Reset Filter</Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"m-1\">\r\n                    <Col xs={12} className=\"mt-1\">\r\n                        <div className=\"table-responsive\" style={{ height: this.state.tableHeight }}>\r\n                            <Table className=\"dataTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        {\r\n                                            this.props.data.length == 0\r\n                                                ? ''\r\n                                                : this.props.data[0].map(data => {\r\n                                                    if (this.state.selectedColumn == data) {\r\n                                                        return <td className=\"tableHeader selectedColumnHeader\" onClick={() => this.updateSelectedColumn(data)}>{data}</td>\r\n                                                    } else {\r\n                                                        return <td className=\"tableHeader\" onClick={() => this.state.clickableColumns.indexOf(data) != -1 ? this.updateSelectedColumn(data) : ''}>{data}</td>\r\n                                                    }\r\n                                                })\r\n                                        }\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.props.data.length == 0\r\n                                            ? ''\r\n                                            : this.state.selectedColumnUniqueSet.length == 0\r\n                                                ? this.props.data.map((rowData, index) => {\r\n                                                    if (index != 0 && rowData[0].length != 0) {\r\n                                                        return (\r\n                                                            <tr>{rowData.map(data => {\r\n                                                                return <td>{data}</td>\r\n                                                            })\r\n                                                            }</tr>\r\n                                                        )\r\n                                                    }\r\n                                                })\r\n                                                : this.state.selectedColumnUniqueSet.map(selectedColumn => {\r\n                                                    var columnIndex = this.props.data[0].indexOf(this.state.selectedColumn);\r\n                                                    return (\r\n                                                        selectedColumn.columns.map((columns, rowIndex) => {\r\n                                                            return (\r\n\r\n                                                                <tr className={selectedColumn.columns.length == (rowIndex + 1) ? 'endOfArrayBorder' : ''}>\r\n                                                                    {\r\n                                                                        columns.map((data, index) => {\r\n                                                                            if (rowIndex != 0 && index == columnIndex) {\r\n\r\n                                                                            } else {\r\n                                                                                if (index == columnIndex) {\r\n                                                                                    return <td className=\"tdRowSpan\" rowSpan={selectedColumn.columns.length}>{data}</td>\r\n                                                                                } else {\r\n                                                                                    return <OverlayTrigger key={rowIndex + \" \" + index} placement={'bottom'} overlay={<Tooltip id={index}>Grouped by {this.state.selectedColumn} : {columns[columnIndex]}</Tooltip>}><td>{data}</td></OverlayTrigger>\r\n                                                                                }\r\n\r\n                                                                            }\r\n                                                                        })\r\n                                                                    }\r\n                                                                </tr>\r\n\r\n                                                            )\r\n                                                        }))\r\n                                                })\r\n\r\n                                    }\r\n                                </tbody>\r\n                            </Table >\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nconst options = { legend: { display: false }, scales: { yAxes: [{ ticks: { beginAtZero: true } }] } }\r\n\r\nexport default class chart extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: {\r\n                labels: [],\r\n                datasets: [{\r\n                    label: 'NetWin',\r\n                    fill: false,\r\n                    lineTension: 0.1,\r\n                    backgroundColor: '#36A2EB',\r\n                    borderColor: '#36A2EB',\r\n                    borderCapStyle: 'butt',\r\n                    borderDash: [],\r\n                    borderDashOffset: 0.0,\r\n                    borderJoinStyle: 'miter',\r\n                    pointBorderColor: '#36A2EB',\r\n                    pointBackgroundColor: '#36A2EB',\r\n                    pointBorderWidth: 7,\r\n                    pointHoverRadius: 5,\r\n                    pointHoverBackgroundColor: '#FF6384',\r\n                    pointHoverBorderColor: '#FF6384',\r\n                    pointHoverBorderWidth: 1,\r\n                    pointRadius: 1,\r\n                    pointHitRadius: 10,\r\n                    data: []\r\n                }]\r\n\r\n            }\r\n        }\r\n        this.getArrayObjectIndex = this.getArrayObjectIndex.bind(this)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextState) {\r\n        var dateIndex = nextProps.data[0].indexOf('Date');\r\n        var netWinIndex = nextProps.data[0].indexOf('NetWin');\r\n        if (this.props.data != nextProps.data) {\r\n            var graphArray = [];\r\n            nextProps.data.map((data, index) => {\r\n                if (index != 0 && data[0].length != 0) {\r\n                    var getIndex = this.getArrayObjectIndex(graphArray, data[dateIndex]);\r\n                    if (getIndex == -1) {\r\n                        var graphObject = new Object();\r\n                        graphObject.date = data[dateIndex];\r\n                        graphObject.netwin = data[netWinIndex];\r\n                        graphArray.push(graphObject)\r\n                    } else {\r\n                        graphArray[getIndex].netwin = Number(graphArray[getIndex].netwin) + Number(data[netWinIndex])\r\n                    }\r\n                }\r\n                var dateArray = [];\r\n                var netWinArray = [];\r\n                graphArray.map(dataValue => {\r\n                    dateArray.push(dataValue.date);\r\n                    netWinArray.push(dataValue.netwin);\r\n                })\r\n                this.setState(prevState => ({\r\n                    data: {\r\n                        ...prevState.data,\r\n                        labels: dateArray,\r\n                        datasets: [Object.assign({}, this.state.data.datasets[0], { data: netWinArray })]\r\n                    }\r\n                }))\r\n\r\n            });\r\n\r\n        }\r\n    }\r\n    getArrayObjectIndex(graphArray, date) {\r\n        return graphArray.findIndex(x => x.date === date);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Row className=\"m-1\" id=\"lineChartDiv\">\r\n                <Col>\r\n                    <h4 className=\"text-center\">NetWin vs Date</h4>\r\n                    <Line height={50} ref={this.chartReference} data={this.state.data} options={options} />\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\nimport logo from '../logo.png'\r\nexport default class header extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar expand=\"lg\" fixed=\"top\" className=\"customNavBar\">\r\n                <Navbar.Brand href=\"#home\">\r\n                    <img style={{ height: '30px' }}\r\n                        src={logo}\r\n                        className=\"d-inline-block align-top\"\r\n                        alt=\"gaming analytics logo\"\r\n                    />\r\n                </Navbar.Brand>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Table from './components/table';\nimport Chart from './components/chart';\nimport Header from './components/header'\nimport { readString } from 'react-papaparse';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      rows: []\n    }\n  }\n\n  componentDidMount() {\n    fetch(require('./data.csv'))\n      .then(response => response.text())\n      .then(text => {\n        let json = readString(text)\n        this.setState({\n          rows: json.data\n        })\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Header></Header>\n        <div style={{ marginTop: \"55px\" }}>\n          <Chart data={this.state.rows}></Chart>\n          <Table data={this.state.rows}></Table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5ea61021.png\";"],"sourceRoot":""}